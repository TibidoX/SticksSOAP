/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.stickssoap;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebService;
import javax.swing.JOptionPane;

/**
 *
 * @author vovab
 */
@WebService
public class Field extends javax.swing.JPanel implements ClientInterface, MouseListener{
    List<MyLine> lines = new ArrayList();
    List<Integer> X = new ArrayList();
    List<Integer> O = new ArrayList();
    ServerInterface stub;
    int id;
    /**
     * Creates new form Field
     */
    public Field() {
        initComponents();
        addMouseListener(this);
    }
    
    @WebMethod
    @Override
    public void showWinner(int id) {
        if (id != -1) {
            Thread thread = new Thread(
            ()->
            {
                if (this.id == id) {
                    JOptionPane.showMessageDialog(this, "You won!!!");
                } else {
                    JOptionPane.showMessageDialog(this, "You lose(((");
                }
            }
            );
            thread.start();
        }
    }
    
    @WebMethod
    @Override
    public void update(List<MyLine> lines, List<Integer> X, List<Integer> O) {
        this.lines = lines;
        this.X = X;
        this.O = O;
        this.repaint();
        for (MyLine line:lines) {
            System.out.println(line.getX()+" "+line.getY());
        }
    }
    
    public void setStub(Stub _stub) {
        stub = _stub.getStub();
    }
    
    public void setId(int id) {
        this.id = id;
    }
    
    public int getId() {
        return id;
    }
    
    @Override
    public void mouseClicked(MouseEvent e) {
        int size = this.getSize().height/6;
        try {
            stub.move(e.getX(), e.getY(), size, id);
        } catch (Exception ex) {
            
        }
    }
    
    @Override
    public void mousePressed(MouseEvent e) {}

    @Override
    public void mouseReleased(MouseEvent e) {}

    @Override
    public void mouseEntered(MouseEvent e) {}

    @Override
    public void mouseExited(MouseEvent e) {}
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        int size = this.getSize().height/6;
        Graphics2D g2d = (Graphics2D) g;
        
        try {
            if (stub.checkMove() == id) {
                g2d.setColor(Color.BLACK);
            } else {
                g2d.setColor(Color.LIGHT_GRAY);
            }
        } catch (Exception ex) {
        }
        
        for (int i = 0; i < 7; i++) 
            for (int j = 0; j < 7; j++) {
                g2d.drawOval(size*j, size*i, 5, 5);
                g2d.fillOval(size*j, size*i, 5, 5);
            }
        
        for (MyLine line : lines) {
            g2d.setStroke(new BasicStroke(3));
            if (line.getPos() == Positions.HORIZONTAL) {
                g2d.drawLine(line.getX()+2, line.getY()+2, 
                line.getX()+size+2, line.getY()+2);
            } else {
                g2d.drawLine(line.getX()+2, line.getY()+2, 
                line.getX()+2, line.getY()+size+2);
            }
        }
        for (int x: X) {
            g2d.setStroke(new BasicStroke(3));
            g2d.setColor(Color.RED);
            int cordX = (x%6)*size;
            int cordY = (x/6)*size;
            g2d.drawLine(cordX+2, cordY+2, cordX + size + 2, cordY + size + 2);
            g2d.drawLine(cordX+2, cordY+size+2, cordX + size+2, cordY+2);
        }
        for (int o: O) {
            g2d.setStroke(new BasicStroke(3));
            g2d.setColor(Color.BLUE);
            int cordX = (o%6)*size;
            int cordY = (o/6)*size;
            g2d.drawOval(cordX+2, cordY+2, size, size);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
